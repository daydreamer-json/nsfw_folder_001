with (MovieControlLayer) {
	// updateLayer生成処理
	&.createUpdateLayer = function(win, par) {
		return; // 常に生成しない

		// 生成する場合
		var lay = new global.Layer(win, par);
		/**/lay.changed = false;
		return lay;
	} incontextof null;

	&.onFrameUpdate = function (frame) {
		if (!isvalid this) return;
		// [MEMO] fillAlpha()をしないので type=ltOpaque 出ないと表示できない
		if (sf.amvfps == 30 && this.fps > 30) {
			// 60fpsムービーの30fps設定のみ有効
			if (frame & 1) return; // 奇数フレームは無視(最初のフレームは0)
		}
		targetLayer.type = ltOpaque;
		flipAssign(targetLayer);
	} incontextof null;
}

// ムービーfpsに合わせたFlipの直更新
/**/     FastMovieHack(AffineSourceFlip);
function FastMovieHack(flip) {
	function local {
		function assignImagesForMovie(src, resize=true) {
			redrawImage(src);
			_image.setSizeToImageSize() if resize;
			updateCenter();
			var owners = this._owners;
			var hack = global.FastMovieHack;
			if (hack.checkSameSize(owners, _width, _height)) {
				firstDraw = true;
				hack.assignFast(owners);
				firstDraw = false;
			} else {
				// 通常処理
				_image.fillAlpha();
				calcUpdate();
				firstDraw = true;
			}
		}
		function updateImage(/*mtx*/) {
			firstDraw = _flipPlaying; // [XXX]
			return __updateImage__(...);
		}
	}
	with (flip) {
		&.assignImagesForMovie = &local.assignImagesForMovie incontextof null;
		&.__updateImage__ = &.updateImage; // backup
		&.updateImage = &local.updateImage incontextof null;
	}
	return;

	// utils
	function checkSameSize(list, w, h) {
		if (w != kag.scWidth || h != kag.scHeight) return; // サイズ違いは対象外
		var mtx = new AffineMatrix();
		w /= 2, h /= 2; // half size
		function isfull(mtx, w, h) {
			// [REVIEW] 等倍画面フル表示判定
			with (mtx) return .isNotZoom() && .m14 == w && .m24 == h;
		}
		for (var n = list.count-1; n >= 0; --n) {
			var aflay = list[n];
			if (aflay) with (aflay) {
				mtx.reset();
				._image.calcMatrix (mtx, aflay);
				//._image.updateImage(mtx, aflay);

				if (!isfull(mtx, w, h)) return; // 加工ありだった
			}
		}
		return true;
	}
	function assignFast(list) {
		for (var n = list.count-1; n >= 0; --n) {
			var aflay = list[n];
			if (aflay) with (aflay) {
				.calcAffine();
				.type = ltOpaque; // [XXX] 強制変更
				.onPaint();
			}
		}
	}
}
